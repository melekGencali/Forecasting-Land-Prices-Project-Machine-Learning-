#%%

import numpy as np # linear cebir
import pandas as pd # veri işleme, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt

import locale
locale.setlocale(locale.LC_ALL, 'tr_TR.utf8')

pd.set_option('display.max_columns', None)
sns.set_palette("Set2")

import os
for dirname, _, filenames in os.walk('Dosyalar/'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
# Dizine yazılan sonuçlar çıktı olarak kaydedilir.


#%%

#encoding = "UTF-8"
train = pd.read_csv("Dosyalar/trainfinish1.csv", encoding = "iso-8859-1", sep=";")
#test = pd.read_csv("Dosyalar/test.csv", encoding = "iso-8859-1", sep=";")
#train['ODASAYISI'] = train.ODASAYISI.astype('int64')
#train['FIYAT'] = train.FIYAT.astype('float64')
#train['ILANTARIHI'] = train.ILANTARIHI.astype('float64')
#hedef = open('Dosyalar/train1.csv', 'w')
#for dosya in train:
#     unicode_metin = dosya.decode('iso-8859-9')

#     utf8_metin = unicode_metin.encode('utf-8', 'ignore')
#     hedef.write(utf8_metin)"""

#test = pd.read_csv("dosyalar/test.csv")



#%%

train.shape

#%%

train.info()
#train.head(3) ->train dosyasından ilk 3 satır okunur
#train.describe()  ile numeric sütunların veri sayısı toplanır. Ortalama , min max dğerleri bulunur.

#%%


objectscol1 = ['CITY','DISTRICT','MAHALLE']


bilgiTablosu = train.describe(include =np.object)
bilgiTablosu


#%%

#Bilgi tablosundaki her bir özellik için öncelikle eksik değere odaklanırız.
# % 90 boş değer özniteliklerini kaldır
#range(int(objectscol))
#x = [0, 1, 2]
#y = ''.join(map(str, objectscol2))
#z = int(y)

#y= ''.join(map(str, objectscol2))
#z = int(y)

for nitelik1 in objectscol1:
    x = bilgiTablosu.loc['count'][nitelik1]/1561
    if x <0.1:print(nitelik1)


#%%

#En az bilgi içeren kolonları kaldır
#train = train.drop(["TAPU DURUMU"], axis = 1)
#train.shape

#%%

#nesnenin boş değerinin geri kalanını "missing" ile doldur
objectcol = train.describe(include = np.object).columns
train[objectcol] = train[objectcol].fillna("missing")

#%%

#train dosyasında temizlik işlemleri yapıldıktan sonraki veri sayıları:
train.info()

#%%

#train dosyasında oda sayısını incelediğimizde 3 ve 4 odalı ev ilanlarında
#bir yığılma olduğu görülüyor.

sns.set(style="darkgrid")
sns.countplot(train["ODASAYISI"])


plt.show()


#%%

#Şimdi train dosyasından oluşturduğumuz modelimizin(objectcol) toplam sütun
#sayısını bularak tüm sütunları grafiklerde inceleyelim.
len(objectcol)

#%%

fig = plt.figure(figsize=(20,150))
fig.subplots_adjust(hspace=0.8, wspace=0.8)

for i in range(1,4):
    ax = fig.add_subplot(20, 2, i)
    g = sns.countplot(train[objectcol[i-1]])
    plt.xticks(rotation=45)


#%%

#Numeric Nitelikler
# float64
#Şimdi, sayısal niteliklere git:
# tüm sayısal sütunları bul
# nan değerlerinin yüzde değerini kontrol et,% 90'ın üzerinde olması durumunda bu özellikleri sil
# nan özelliklerini 0 ile doldur
# sa
#%%

#Numeric Nitelikler
# float64
#Şimdi, sayısal niteliklere git:
# tüm sayısal sütunları bul
# nan değerlerinin yüzde değerini kontrol et,% 90'ın üzerinde olması durumunda bu özellikleri sil
# nan özelliklerini 0 ile doldur
# sadece 0 durumunu kontrol ediyoruz, Int64 için de aynı şekilde.
flotcol = train.describe(include = np.float64).columns
bilgiTable2 = train.describe(include = np.float64)
for nitelik in flotcol:
    x = bilgiTable2.loc['count'][nitelik]/1561
    if x < 0.1:
        print("90% boş değer bulundu:{}",nitelik)
    else:
        print("%90 boş değer bulunamadı")
        pass
        #hiçbir şey olmadı
#train[flotcol]=train[flotcol].fillna(0)

train_numeric = train._get_numeric_data()



#%%

#numeric kolonlarda boş satırları doldurmak için aynı kolondaki diğer verilerin
#ortalaması alınarak doldurulur.
for col in train_numeric.columns:
 if train_numeric[col].isnull().sum() > 0:
    train_numeric[str(col) + "_mean"] = train_numeric[col].fillna(train_numeric[col].mean())
    train_numeric[str(col)] = train_numeric[col].fillna(train_numeric[col].median())

#%%

#numeric değerlerin sayısı kontrol edilir.
train.info()

#%%

#float64 değerlerimizden 3 ünün grafiğini inceleyelim.
fig = plt.figure(figsize=(15,5))
fig.subplots_adjust(hspace=0.8, wspace=0.8)
for i in range(1, 4):
    ax = fig.add_subplot(1, 3, i)
    sns.distplot(train[flotcol[i-1]])


#%%

# INT64 Öznitellikler
intcol = train.describe(include = np.int64).columns
bilgiTablosu3 = train.describe(include = np.int64)
bilgiTablosu3

#%%

for nitelik in intcol:
    x = bilgiTablosu3.loc['count'][nitelik]/1561
    if x < 0.1:
        print(" 90% boş değer bulundu:{}",nitelik)
    else:
        pass
        #hiçbir şey olmadı
print("bitti")


#%%

len(intcol)

#%%

#İnt64 özniteliklerine genel bakışı çizin
#sns.distplot(train["BANYOSAYISI"])
fig = plt.figure(figsize=(15,15))
fig.subplots_adjust(hspace=0.8, wspace=0.8)
for i in range(1, 7):
    ax = fig.add_subplot(7, 5, i)
    sns.distplot(train[intcol[i-1]])

#%%

#Korelasyon matrix for
#Korelasyon matrisi yüksek derecede korelasyonlu sütunları gösterir. Çapraz çizgi yüksek korelasyona sahiptir,
#çünkü sadece aynı sütunlarla eşleşir. Diğer sütunlar yüksek korelasyonluysa daha açık renklerle, herhangi bir
#sütun çifti arasında daha az korelasyon varsa daha koyu renkle görüntülenir.

import matplotlib.pyplot as plt
plt.matshow(train_numeric.corr())
plt.show()

#%%

# İlişki araştırması
# Satılan yıl ile konut fiyatı arasındaki ilişkiye daha yakından bak
#sns.violinplot(y = train["FIYAT"],x=train["KREDIYE UYGUN"], scale_hue=True, weight=10,height=4, aspect=.7)
sns.violinplot(y = train["FIYAT"],x=train['DISTRICT'])
#sns.violinplot(y = train["FIYAT"],x=train["ILANTARIHI"])
#Bir özellik seçimi yapıp, korelasyon aramak için korelasyon grafiklerini çizeceğim.

#%%

# Özelliği Önem kontrolü
# Özellik seçimi için extra tree classifier'ı kullanıldı.
from sklearn.ensemble import ExtraTreesRegressor
target = train['FIYAT']
features = train.drop(columns = ['FIYAT','ILANNO'])
# sadece sayısal özellikler için mümkün, bu yüzden burada sadece sayısal kullan
non_obj_features = features.describe(exclude = np.object).columns
features = features[non_obj_features]
beforefs = features.columns
print("önce  feature selection:{} features sayısı.".format(len(non_obj_features)))
#classifer for feature selection oluşturulur
forest  = ExtraTreesRegressor(n_estimators = 50)
forest = forest.fit(features, target)
importance_table = pd.Series(forest.feature_importances_, index=features.columns)
importance_table = importance_table.sort_values(ascending = False)
plt.figure(figsize=(16,8))
ax = sns.barplot(x = importance_table.index[:10], y = importance_table.values[:10], palette="BuGn_r")
ax.set_title('özelliğin önemi')
#features: özellik
select_feature = importance_table.index[:10]
#importance_table

#%%

select_feature

#%%

#Regressionda en önemli 10 özelliği seçtik

fig = sns.PairGrid(train[select_feature[0:5]])
fig.map_offdiag(plt.scatter)
fig.map_diag(sns.distplot, bins=30)

#%%

#Başka iki özelliğin seçtiği ikinci beşe geçelim.
fig = sns.PairGrid(train[select_feature[5:]])
fig.map_offdiag(plt.scatter)
fig.map_diag(sns.distplot, bins=30);


#%%

#Daha fazla desen keşfi
# 1. satış fiyatı ile seçilen 10 özellik arasındaki korelasyon fig = plt.figure(figsize=(10,20))
fig = plt.figure(figsize=(10,20))
fig.subplots_adjust(hspace=0.5, wspace=0.5)

for i in range(1, 11):
    ax = fig.add_subplot(5, 2, i)
    g = sns.scatterplot(x = train[select_feature[i-1]], y="FIYAT", data=train)
    g.set_xlabel(g.get_xlabel(),fontsize= 20)
    g.set_ylabel(g.get_ylabel(),fontsize= 15)
    plt.xticks(rotation=45)

#%%

#başta verdiğimiz obje modellerine göre fiyat ile korelasyon işlemi yapılır
fig = plt.figure(figsize=(20,150))
fig.subplots_adjust(hspace=0.8, wspace=0.8)

for i in range(1, 4):
    ax = fig.add_subplot(20, 2, i)
    g = sns.violinplot(x = train[objectcol[i-1]], y="FIYAT", data=train)
    g.set_xlabel(g.get_xlabel(),fontsize= 20)
    g.set_ylabel(g.get_ylabel(),fontsize= 15)
    plt.xticks(rotation=46)

#%%

len(objectcol)

#%%

# Şimdi seçilen özelliğime bir makine öğrenme algoritmasıyla uyacak ve öngörülü
#bir model olarak doğuracağım. Ancak, test verilerimde boş değerler olabileceğinden
#test verilerinde de temizlik şaması gerçekleştirildi.
#test = pd.read_csv("Dosyalar/test.csv")
# making data frame from csv file
test = pd.read_csv("Dosyalar/testfinish1.csv", encoding = "iso-8859-1", sep=";")

# retrieving rows by loc method
#rows = data.loc[["M2", "KATSAYISI"]]

# checking data type of rows
#print(type(rows))

# display
#rows
#data[select_feature].info()
test.shape

#%%

test.info()

#%%

test[select_feature].info()

#%%

# Eksik değerleri kontrol etme
eksik_deger_sayisi = (test[select_feature].isnull().sum())
print(eksik_deger_sayisi[eksik_deger_sayisi > 0])

#%%

test[select_feature].info()

#%%

# Eksik sayısal değeri değiştirmenin basit bir yolu ortalama sayı / 0 ile değiştirilir.
missing_cols =eksik_deger_sayisi[test[select_feature].isnull().sum()>0].index
for i in range(0,len(missing_cols)):
    fillwith = test[missing_cols[i]].mean()
    test[missing_cols[i]].fillna(value=fillwith, inplace  = True)

#%%

test[select_feature].info()

#%%

#machine leanring modelini çalıştır:
X = train.drop(columns =['ILANNO','FIYAT'])

#%%

print("Kullanılan {} özellikler var. ".format(len(X.columns)))

#%%

X = pd.get_dummies(X)

#%%

print("Kullanılan {} özellik vardır. ".format(len(X.columns)))

#%%

X_test = test.drop(columns =['ILANNO'])
X_test = pd.get_dummies(X_test)

#%%

pd.isnull(train).sum() > 0

#%%

pd.isnull(test).sum() > 0

#%%

objectcol = test.describe(include = np.object).columns
test[objectcol] = test[objectcol].fillna("missing")

#%%

test_numeric = test._get_numeric_data()

#%%

for col in test_numeric.columns:
 if test_numeric[col].isnull().sum() > 0:
    test_numeric[str(col) + "_mean"] = test_numeric[col].fillna(test_numeric[col].mean())
    test_numeric[str(col)] = test_numeric[col].fillna(test_numeric[col].median())

#%%

pd.isnull(test).sum() > 0

#%%

missing_val_count_by_column = (X_test.isnull().sum())
print(missing_val_count_by_column[missing_val_count_by_column > 0])
#missing_cols =missing_val_count_by_column[X_test.isnull().sum()>0].index
for i in range(0,len(missing_cols)):
    fillwith = X_test[missing_cols[i]].mean()
    X_test[missing_cols[i]].fillna(value=fillwith, inplace  = True)

#%%

X_test =X_test.drop(columns =['MAHALLE_ZIRVEKENT MH.', 'MAHALLE_YAVUZSELIM MH.', 'MAHALLE_EVKAF MAH.', 'MAHALLE_BEYTEPE MAH.', 'DISTRICT_AKSU', 'MAHALLE_ADALET MAH.', 'MAHALLE_YANCIKCI SAHIN MH.', 'MAHALLE_OMERAGA MH.', 'MAHALLE_AKSU MAH.', 'MAHALLE_KARAAGAC MH.', 'MAHALLE_SILLE PARSANA MAH.', 'MAHALLE_KARAMANLI MH.', 'MAHALLE_FEYZULLAH MAH.', 'MAHALLE_KILICASLAN MH.', 'MAHALLE_PASACIK MH.', 'MAHALLE_AKABE MAH.', 'DISTRICT_SASON', 'MAHALLE_YENI BATI MH.', 'CITY_KARABUK', 'MAHALLE_TANTAVI MAH.', 'MAHALLE_UCGEN MH.', 'MAHALLE_30 AGUSTOS ZAFER MH.', 'MAHALLE_YAYA MAH.', 'MAHALLE_DURAK MAH.', 'MAHALLE_ZEKI AYAN MAH.', 'MAHALLE_SULTAN MURAT MAH.', 'MAHALLE_HACIHASAN MH.', 'MAHALLE_BEYAZEVLER MAH.', 'MAHALLE_HOSNUDIYE MH.', 'MAHALLE_PASAKONAK MH.', 'MAHALLE_MECIDIYEKOY MH.', 'MAHALLE_GEBIZLI MAH.', 'MAHALLE_KOZYATAGI MH.', 'MAHALLE_YENI MAHALLE MAH.', 'MAHALLE_NIHAT DANISMAN MH.', 'MAHALLE_TURKLER MH.', 'MAHALLE_SENYUVA MH.', 'CITY_KIRSEHIR', 'MAHALLE_MUSAZADE MAH.', 'MAHALLE_GUZELYALI SITELER MH.', 'MAHALLE_KARACAAHMET MAH.', 'MAHALLE_TEYYAREDUZU MH.', 'DISTRICT_CUBUK', 'MAHALLE_OZALPER MH.', 'MAHALLE_SULEYMANSAH MH.', 'MAHALLE_KIRMIZITOPRAK MH.', 'MAHALLE_HAMZAOGLU MH.', 'MAHALLE_YALIMH.', 'DISTRICT_ORTAHISAR', 'MAHALLE_SELIMPASA MH.', 'MAHALLE_ORHANIYE MAH.', 'MAHALLE_BASAKSEHIR MH.', 'MAHALLE_CEVAT PASA MH.', 'MAHALLE_EKSIOGLU MH.', 'MAHALLE_GELINCIK MAH.', 'MAHALLE_ONERLER MH.', 'MAHALLE_KUCUKYALIMH.', 'DISTRICT_MUSTAFAKEMALPASA', 'MAHALLE_BAYINDIR MH.', 'MAHALLE_YESILPINAR MH.', 'MAHALLE_SEYHCUI MH.', 'MAHALLE_YENI SEHIR MH.', 'MAHALLE_ALI CETINKAYA MH.', 'DISTRICT_CAYIROVA', 'MAHALLE_DENIZEVLERI MAH.', 'MAHALLE_BAYRAMOGLU MH.', 'DISTRICT_VIRANSEHIR', 'MAHALLE_YILDIZHAN MH.', 'MAHALLE_YEDI EYLUL MH.', 'MAHALLE_SIRINEVLER MH.', 'MAHALLE_CELIKTEPE MH.', 'MAHALLE_OMER AVNI MH.', 'MAHALLE_KORUCUK MAH.', 'MAHALLE_COLAK IBRAHIM BEY MH.', 'MAHALLE_DUTLUBAHCE MH.', 'DISTRICT_AVANOS', 'MAHALLE_CETIN EMECMH.', 'DISTRICT_SAPANCA', 'DISTRICT_ALASEHIR', 'MAHALLE_VIRANSEHIR MH.', 'DISTRICT_TAVSANLI', 'MAHALLE_GUNESLER MERKEZ MH.', 'MAHALLE_GOLEVI MH.', 'MAHALLE_CANDARLI MH.', 'MAHALLE_DEMIRTASPASA MH.', 'MAHALLE_YUZUNCUYIL MH.', 'DISTRICT_BEYPAZARI', 'DISTRICT_TARSUS', 'MAHALLE_FULYA MAH.', 'MAHALLE_AHMET VEFIK PASA MH.', 'DISTRICT_BAGLAR', 'CITY_ADANA', 'MAHALLE_SELIMIYE MAH.', 'DISTRICT_CERKEZKOY', 'MAHALLE_SINAN MH.', 'MAHALLE_GONCALAR MAH.', 'DISTRICT_ALACA', 'MAHALLE_KALESAH MH.', 'MAHALLE_TECDE MAH.', 'MAHALLE_DUTLU KOYU', 'MAHALLE_RUSTEM PASA MH.', 'MAHALLE_GUNESLI MH.', 'MAHALLE_SOGUKPINAR MH.', 'MAHALLE_MURADIYE MAH.', 'MAHALLE_GAZIPASA MH.', 'MAHALLE_MELIKSAH MH.', 'MAHALLE_PINAR MH.', 'MAHALLE_MURATBEY MAH.', 'MAHALLE_MUHITTIN MAH.', 'MAHALLE_GUZELYALIMH.', 'MAHALLE_CAMLIPINAR MH.', 'MAHALLE_EVKA 3 MAH.', 'MAHALLE_HACI HASANLI MH.', 'MAHALLE_SEDIR MAH.', 'MAHALLE_PIRI REIS MAH.', 'DISTRICT_DIKILI', 'MAHALLE_GAZI MUSTAFA KEMAL MAH.', 'CITY_CANKIRI', 'MAHALLE_KESTEL', 'DISTRICT_TOSYA', 'MAHALLE_ARPACSAKARLAR MH.', 'MAHALLE_AKEVLER MAH.', 'MAHALLE_ASIKPASA MH.', 'DISTRICT_MERZIFON', 'MAHALLE_KIRKKONAKLAR MH.', 'MAHALLE_EVREN MAH.', 'DISTRICT_AKCAABAT', 'MAHALLE_YAHYAKAPTAN MAH.', 'MAHALLE_OGUMSOGUT MH.', 'MAHALLE_FUATMOREL MAH.', 'MAHALLE_ZUBEYDE HANIM MH.', 'MAHALLE_HACI BAYRAM MH.', 'MAHALLE_KONUTKENT MAH.', 'DISTRICT_AKYURT', 'MAHALLE_MURATPASA MH.', 'DISTRICT_INCIRLIOVA', 'MAHALLE_KAPTANPASA MH.', 'CITY_AMASYA', 'MAHALLE_KORKUTREIS MAH.', 'MAHALLE_CERRAHPASA MH.', 'MAHALLE_DOGUKENT MH.', 'CITY_BOLU', 'MAHALLE_HURMA MAH.', 'MAHALLE_3 NOLU ERDOGDU MH.', 'DISTRICT_SEYDISEHIR', 'MAHALLE_KIZILCALAR MH.', 'MAHALLE_HALLACLAR MH.', 'MAHALLE_DOSEME MH.', 'MAHALLE_ICERENKOY MH.', 'DISTRICT_KOZLU', 'MAHALLE_1. SAKARYA MAH.', 'MAHALLE_CAMTEPE MH.', 'MAHALLE_FAKIUSAGI MH.', 'MAHALLE_ABDURRAHMAN NAFIZ GURMAN MH.', 'MAHALLE_ORHANGAZI', 'DISTRICT_VIZE', 'MAHALLE_BEYLERBEYI MH.', 'MAHALLE_TESVIKIYE MH.', 'MAHALLE_ALTINOLUK MH.', 'MAHALLE_YUKARI HISAR MH.', 'CITY_AKSARAY', 'DISTRICT_NIZIP', 'MAHALLE_PERILIKAYA MAH.', 'DISTRICT_ISKENDERUN', 'MAHALLE_HACIOGLU MH.', 'DISTRICT_GURSU', 'CITY_ADIYAMAN', 'DISTRICT_ERFELEK', 'MAHALLE_4 EYLUL MH.', 'MAHALLE_TUZLUCAYIR MH.', 'MAHALLE_TURGUTALP BLD.', 'DISTRICT_BEYKOZ', 'MAHALLE_SUVARI MH.', 'MAHALLE_DEMIRKOPRU MH.', 'MAHALLE_INAC KOYU', 'DISTRICT_NARLIDERE', 'DISTRICT_SALIHLI', 'MAHALLE_SAHRAYICEDIT MH.', 'MAHALLE_DONANMA MAH.', 'MAHALLE_ULUCMH.', 'MAHALLE_KAYABASIMH.', 'DISTRICT_BOZYAZI', 'MAHALLE_CINARLI MH.', 'MAHALLE_AKSOY MAH.', 'DISTRICT_MENEMEN', 'MAHALLE_KAZIMDIRIK MH.', 'MAHALLE_OSMANAGA MH.', 'MAHALLE_KACALI MH.', 'MAHALLE_TATLIKUYU MH.', 'MAHALLE_KARAMAN MAH.', 'MAHALLE_KUCUKKOY MH.', 'MAHALLE_TOPKAPI MH.', 'MAHALLE_SAHINTEPE MH.', 'MAHALLE_DEREAGZI MH.', 'DISTRICT_PERSEMBE', 'MAHALLE_DEMIRCILERARDI MH.', 'MAHALLE_BAGCILAR MH.', 'MAHALLE_MANSUROGLU MH.', 'MAHALLE_BEYKENT MAH.', 'CITY_BILECIK', 'MAHALLE_KEPEZ BLD. (HAMIDIYE MH.)', 'DISTRICT_YAHSIHAN', 'MAHALLE_PAMUKLAR MAH.', 'MAHALLE_HUZUR MAH.', 'MAHALLE_MOLLA GURANI MH.', 'MAHALLE_DEGIRMENDERE MH.', 'MAHALLE_SUSUZ MAH.', 'MAHALLE_CAYBOYU MH.', 'MAHALLE_BESTELSIZ MH.', 'MAHALLE_YENIYALI MH.', 'MAHALLE_NURIPASA MH.', 'MAHALLE_SOGUTLU CESME MH.', 'MAHALLE_HUZUREVLERI MAH.', 'MAHALLE_RAUFBEY MAH.', 'MAHALLE_YENISAFAK MH.', 'DISTRICT_SEFERIHISAR', 'MAHALLE_BOLAMAN BLD.', 'DISTRICT_KESTEL', 'MAHALLE_TASDELEN MH.', 'MAHALLE_YUKARI BAHCELIEVLER MH.', 'MAHALLE_OSMAN AVCI MH.', 'MAHALLE_CUKURABANOZ MH.', 'MAHALLE_KARAKOPRU MH.', 'MAHALLE_ADNAN MENDERES MAH.', 'MAHALLE_RAGIP TUZUN MH.', 'MAHALLE_DILSIKAR MH.', 'MAHALLE_MELTEM MAH.', 'MAHALLE_DIRMIL MH.', 'MAHALLE_KASIMPASA MH.', 'MAHALLE_GUNESEVLER MH.', 'MAHALLE_IBN-I SINA MH.', 'MAHALLE_EFELER MAH.', 'DISTRICT_ADAPAZARI', 'MAHALLE_KOZAGACMH.', 'MAHALLE_CEBECI MAH.', 'MAHALLE_INTIZAM MH.', 'DISTRICT_ANAMUR', 'MAHALLE_MERKEZ EFENDI MAH.', 'DISTRICT_TURHAL', 'DISTRICT_SEHZADELER', 'MAHALLE_GAZI OSMAN PASA MH.', 'MAHALLE_SEYRANTEPE MAH.', 'DISTRICT_POLATLI', 'CITY_AGRI', 'MAHALLE_KUZEYYAKA MAH.', 'MAHALLE_HALKKENT MAH.', 'MAHALLE_KARASEKI MAH.', 'MAHALLE_MERSIN ALANI MH.', 'MAHALLE_ZUHTUPASA MH.', 'DISTRICT_BANDIRMA', 'MAHALLE_ESKI CAMI MAH.', 'MAHALLE_KARAAGACMH.', 'MAHALLE_KIRAZPINAR MH.', 'MAHALLE_BELKIZ MH.', 'MAHALLE_SEYITNECMETTIN MAH.', 'MAHALLE_GUZELYALI YALI MH.', 'MAHALLE_ORNEK MH.', 'MAHALLE_BEYAZIT MH.', 'DISTRICT_SOMA', 'DISTRICT_ONIKI MH.', 'MAHALLE_YESILBAYIR MH.', 'MAHALLE_CAPANOGLU MH.', 'MAHALLE_YENIBOSNA MERKEZ MAH.', 'MAHALLE_KENTKOOP MAH.', 'DISTRICT_GERZE', 'MAHALLE_DEDEBASI MH.', 'MAHALLE_IKITELLI OSB', 'MAHALLE_KOY MH.', 'MAHALLE_KIRAZLI MH.', 'MAHALLE_HOCAALIZADE MAH.', 'MAHALLE_SOGUTLU MH.', 'MAHALLE_KAVAKLIDERE MH.', 'MAHALLE_SEMIKLER MH.', 'MAHALLE_KISLA MH.', 'DISTRICT_AYANCIK', 'MAHALLE_CUBUKKOYAGI MH.', 'MAHALLE_HAVAALANIMH.', 'MAHALLE_TURGUT MAH.', 'MAHALLE_TOPRAKLIK MH.', 'MAHALLE_KADINLAR DENIZI MH.', 'MAHALLE_ALTINEVLER MH.', 'MAHALLE_BAHCEKOY KEMER MH.', 'MAHALLE_ERENKOY MH.', 'MAHALLE_MIMAROBA', 'MAHALLE_YUKSEK MH.', 'DISTRICT_BAYRAMPASA', 'MAHALLE_BESTEPE MH.', 'DISTRICT_UNYE', 'MAHALLE_SEHITLER TEPESI MH.', 'MAHALLE_17 EYLUL MH.', 'CITY_YOZGAT', 'MAHALLE_KARATAS MH.', 'MAHALLE_ETILER MAH.', 'MAHALLE_SOGUKSU MH.', 'MAHALLE_KEMALPASA MH.', 'MAHALLE_ABBASAGA MH.', 'MAHALLE_EFENDIBEY MAH.', 'MAHALLE_HAMITLER MAH.', 'MAHALLE_UZUNOLUK MAH.', 'MAHALLE_YENIBAGLAR MH.', 'MAHALLE_KUMBAHCE MH.', 'CITY_BARTIN', 'DISTRICT_KAYAPINAR', 'MAHALLE_KUCUKKIZILHISAR MH.', 'MAHALLE_GUZELYURT MH.', 'MAHALLE_BOSNA HERSEK MAH.', 'MAHALLE_ORTABAYIR MH.', 'DISTRICT_AKCAKOCA', 'MAHALLE_ALANLI MH.', 'MAHALLE_PASABAYIR MH.', 'MAHALLE_TURKUAZ MH.', 'MAHALLE_ABIDINPASA MH.', 'DISTRICT_MANAVGAT', 'MAHALLE_IPEK YOLU MH.', 'MAHALLE_ODUNLUK MAH.', 'DISTRICT_BOZUYUK', 'MAHALLE_INCESU YALI MH.', 'MAHALLE_MIMAR SINAN', 'MAHALLE_GULVEREN MH.', 'MAHALLE_SENEVLER MH.', 'MAHALLE_GUVENTEPE MH.', 'MAHALLE_GUNDOGDU - TURGUT MH.', 'MAHALLE_OSMANGAZI MAH.', 'MAHALLE_COLAKLI MH.', 'MAHALLE_KURUPASA MH.', 'MAHALLE_MARMARA MAH.', 'MAHALLE_SINANOBA', 'DISTRICT_AYVALIK', 'MAHALLE_BALIKCILAR KOYU', 'MAHALLE_EGEKENT MAH.', 'DISTRICT_AMASRA', 'MAHALLE_ATAEVLER MH.', 'MAHALLE_KUZULUK MAH.', 'MAHALLE_29 EKIM MAH.', 'MAHALLE_TUNALI MH.', 'MAHALLE_ERZENE MAH.', 'DISTRICT_SEHITKAMIL', 'MAHALLE_ESENEVLER MAH.', 'MAHALLE_ISTANBULLUOGLU MH.', 'MAHALLE_BOZYAKA MAH.', 'MAHALLE_PANCARLI MH.', 'MAHALLE_MIMAR SINAN MAH.', 'MAHALLE_SIRINTEPE MH.', 'DISTRICT_ANTAKYA', 'MAHALLE_VATAN MAH.', 'DISTRICT_TOPRAKKALE', 'MAHALLE_DAVUTLAR', 'MAHALLE_ALTINSEHIR MH.', 'MAHALLE_KUMLUBEL MAH.', 'MAHALLE_FAHRI KORUTURK MH.', 'MAHALLE_KARAGOZLER MH.', 'DISTRICT_KAPAKLI', 'DISTRICT_EREGLI', 'MAHALLE_SELAMI ALI MAH.', 'MAHALLE_CAFERIYE KOYU', 'MAHALLE_COBANCESME MH.', 'MAHALLE_CAMLITEPE MH.', 'MAHALLE_MAARIF MH.', 'MAHALLE_AKEVLER MH.', 'MAHALLE_PIRI PASA MH.', 'MAHALLE_HALKALI MERKEZ MH.', 'MAHALLE_SEGMENLER MH.', 'MAHALLE_YEDITEPE MAH.', 'MAHALLE_TALAYTEPE MAH.', 'MAHALLE_HACIFEYZULLAH MH.', 'MAHALLE_BEYLERBEYI MAH.', 'MAHALLE_AZIZ MAHMUT HUDAYI MH.', 'MAHALLE_KEMERAGZI MH.', 'MAHALLE_ORHAN GAZI MAH.', 'MAHALLE_ATAKOY 7-8-9-10. KISIM MH.', 'MAHALLE_KARDESLER MH.', 'MAHALLE_KUMLA MH.', 'MAHALLE_BALLICA MH.', 'MAHALLE_SEKER MH.', 'MAHALLE_KOPRUBASI MH.', 'MAHALLE_BEBEK MAH.', 'MAHALLE_PURTELAS HASAN EFENDI MH.', 'MAHALLE_28 HAZIRAN MAH.', 'MAHALLE_SINAN MAH.', 'MAHALLE_OSMAN MH.', 'DISTRICT_MUDANYA', 'MAHALLE_MERVESEHIR MH.', 'MAHALLE_ASIKVEYSEL MH.', 'MAHALLE_IDEALTEPE MH.', 'MAHALLE_VADISEHIR MH.', 'MAHALLE_AYVASIK MH.', 'MAHALLE_ERIKLIMAN MAH.', 'MAHALLE_KEMERALTI MH.', 'MAHALLE_UZUNMEHMET MAH.', 'MAHALLE_GAZICELAL MH.', 'MAHALLE_HAVUZLAR MAH.', 'MAHALLE_SARAY CUMHURIYET MAH.', 'MAHALLE_LIMONTEPE MAH.', 'MAHALLE_GESI FATIH MAH.', 'MAHALLE_BAGLIK MH.', 'MAHALLE_GURPINAR MH.', 'MAHALLE_CEMALPASA MH.', 'MAHALLE_YENIKALE MAH.', 'MAHALLE_BUYUKESAT MH.', 'MAHALLE_SIRINYALI MH.', 'MAHALLE_OVAAKCA SANTRAL MH.', 'MAHALLE_DURALI ALIC MH.', 'DISTRICT_NAZILLI', 'DISTRICT_KONAK', 'MAHALLE_VADI MH.', 'MAHALLE_GUZELOBA MH.', 'MAHALLE_KORFEZ MH.', 'MAHALLE_DOGANBEY MH.', 'MAHALLE_GULBAHAR MH.', 'MAHALLE_ISA DIVANLI MH.', 'DISTRICT_KORKUTELI', 'MAHALLE_NAMAZGAH MAH.',
                              'MAHALLE_CALILIOZ MH.', 'MAHALLE_MAHSEN MAH.', 'DISTRICT_KARACABEY', 'CITY_NEVSEHIR'])

#%%

X = X[X_test.columns]

#%%

missing_val_count_by_column = (X_test.isnull().sum())
missing = missing_val_count_by_column[missing_val_count_by_column > 0]
missing_cols =missing_val_count_by_column[X_test.isnull().sum()>0].index
for i in range(0,len(missing)):
    fillwith = X_test[missing_cols[i]].mean()
    print(fillwith)
    X_test[missing_cols[i]] = X_test[missing_cols[i]].fillna(value=fillwith)

#%%

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV


parameters  = {
    'n_estimators': [50,100,200,300,700],
    'max_features': ['auto', 'sqrt', 'log2']
}
forest = RandomForestRegressor()
#grid search cv yöntemini orman ve parametrelere uygular.
gs_forest = GridSearchCV(forest, parameters, cv = 5)
gs_forest.fit(X, target)


#%%

print("Best score: {}, \nBest params: {}".format(gs_forest.best_score_,gs_forest.best_estimator_))

#%%

#En iyi bulunan parametreleri içeren tahminler dosyaya yazdırılır.
result = gs_forest.predict(X_test)
handin = pd.DataFrame({'ILANNO': test.ILANNO,'FIYAT': result})
handin.to_csv('TAHMIN9.csv', index=False)

#%%


